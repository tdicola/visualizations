/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['assertion.js']) {
  _$jscoverage['assertion.js'] = [];
  _$jscoverage['assertion.js'][48] = 0;
  _$jscoverage['assertion.js'][56] = 0;
  _$jscoverage['assertion.js'][67] = 0;
  _$jscoverage['assertion.js'][68] = 0;
  _$jscoverage['assertion.js'][69] = 0;
  _$jscoverage['assertion.js'][70] = 0;
  _$jscoverage['assertion.js'][85] = 0;
  _$jscoverage['assertion.js'][99] = 0;
  _$jscoverage['assertion.js'][100] = 0;
  _$jscoverage['assertion.js'][103] = 0;
  _$jscoverage['assertion.js'][104] = 0;
  _$jscoverage['assertion.js'][121] = 0;
  _$jscoverage['assertion.js'][123] = 0;
  _$jscoverage['assertion.js'][137] = 0;
  _$jscoverage['assertion.js'][139] = 0;
  _$jscoverage['assertion.js'][153] = 0;
  _$jscoverage['assertion.js'][155] = 0;
  _$jscoverage['assertion.js'][170] = 0;
  _$jscoverage['assertion.js'][172] = 0;
  _$jscoverage['assertion.js'][173] = 0;
  _$jscoverage['assertion.js'][187] = 0;
  _$jscoverage['assertion.js'][189] = 0;
  _$jscoverage['assertion.js'][202] = 0;
  _$jscoverage['assertion.js'][204] = 0;
  _$jscoverage['assertion.js'][218] = 0;
  _$jscoverage['assertion.js'][220] = 0;
  _$jscoverage['assertion.js'][234] = 0;
  _$jscoverage['assertion.js'][236] = 0;
  _$jscoverage['assertion.js'][250] = 0;
  _$jscoverage['assertion.js'][252] = 0;
  _$jscoverage['assertion.js'][266] = 0;
  _$jscoverage['assertion.js'][268] = 0;
  _$jscoverage['assertion.js'][269] = 0;
  _$jscoverage['assertion.js'][288] = 0;
  _$jscoverage['assertion.js'][290] = 0;
  _$jscoverage['assertion.js'][295] = 0;
  _$jscoverage['assertion.js'][309] = 0;
  _$jscoverage['assertion.js'][311] = 0;
  _$jscoverage['assertion.js'][316] = 0;
  _$jscoverage['assertion.js'][330] = 0;
  _$jscoverage['assertion.js'][332] = 0;
  _$jscoverage['assertion.js'][337] = 0;
  _$jscoverage['assertion.js'][356] = 0;
  _$jscoverage['assertion.js'][358] = 0;
  _$jscoverage['assertion.js'][363] = 0;
  _$jscoverage['assertion.js'][379] = 0;
  _$jscoverage['assertion.js'][381] = 0;
  _$jscoverage['assertion.js'][383] = 0;
  _$jscoverage['assertion.js'][388] = 0;
  _$jscoverage['assertion.js'][406] = 0;
  _$jscoverage['assertion.js'][408] = 0;
  _$jscoverage['assertion.js'][413] = 0;
  _$jscoverage['assertion.js'][430] = 0;
  _$jscoverage['assertion.js'][431] = 0;
  _$jscoverage['assertion.js'][436] = 0;
  _$jscoverage['assertion.js'][451] = 0;
  _$jscoverage['assertion.js'][452] = 0;
  _$jscoverage['assertion.js'][456] = 0;
  _$jscoverage['assertion.js'][471] = 0;
  _$jscoverage['assertion.js'][472] = 0;
  _$jscoverage['assertion.js'][477] = 0;
  _$jscoverage['assertion.js'][492] = 0;
  _$jscoverage['assertion.js'][493] = 0;
  _$jscoverage['assertion.js'][498] = 0;
  _$jscoverage['assertion.js'][514] = 0;
  _$jscoverage['assertion.js'][515] = 0;
  _$jscoverage['assertion.js'][517] = 0;
  _$jscoverage['assertion.js'][522] = 0;
  _$jscoverage['assertion.js'][537] = 0;
  _$jscoverage['assertion.js'][538] = 0;
  _$jscoverage['assertion.js'][543] = 0;
  _$jscoverage['assertion.js'][562] = 0;
  _$jscoverage['assertion.js'][563] = 0;
  _$jscoverage['assertion.js'][564] = 0;
  _$jscoverage['assertion.js'][569] = 0;
  _$jscoverage['assertion.js'][589] = 0;
  _$jscoverage['assertion.js'][590] = 0;
  _$jscoverage['assertion.js'][591] = 0;
  _$jscoverage['assertion.js'][592] = 0;
  _$jscoverage['assertion.js'][595] = 0;
  _$jscoverage['assertion.js'][601] = 0;
  _$jscoverage['assertion.js'][602] = 0;
  _$jscoverage['assertion.js'][609] = 0;
  _$jscoverage['assertion.js'][610] = 0;
  _$jscoverage['assertion.js'][626] = 0;
  _$jscoverage['assertion.js'][627] = 0;
  _$jscoverage['assertion.js'][631] = 0;
  _$jscoverage['assertion.js'][648] = 0;
  _$jscoverage['assertion.js'][649] = 0;
  _$jscoverage['assertion.js'][650] = 0;
  _$jscoverage['assertion.js'][652] = 0;
  _$jscoverage['assertion.js'][657] = 0;
  _$jscoverage['assertion.js'][672] = 0;
  _$jscoverage['assertion.js'][673] = 0;
  _$jscoverage['assertion.js'][678] = 0;
  _$jscoverage['assertion.js'][693] = 0;
  _$jscoverage['assertion.js'][694] = 0;
  _$jscoverage['assertion.js'][699] = 0;
  _$jscoverage['assertion.js'][714] = 0;
  _$jscoverage['assertion.js'][715] = 0;
  _$jscoverage['assertion.js'][717] = 0;
  _$jscoverage['assertion.js'][722] = 0;
  _$jscoverage['assertion.js'][736] = 0;
  _$jscoverage['assertion.js'][738] = 0;
  _$jscoverage['assertion.js'][739] = 0;
  _$jscoverage['assertion.js'][758] = 0;
  _$jscoverage['assertion.js'][759] = 0;
  _$jscoverage['assertion.js'][762] = 0;
  _$jscoverage['assertion.js'][766] = 0;
  _$jscoverage['assertion.js'][768] = 0;
  _$jscoverage['assertion.js'][772] = 0;
  _$jscoverage['assertion.js'][773] = 0;
  _$jscoverage['assertion.js'][777] = 0;
  _$jscoverage['assertion.js'][778] = 0;
  _$jscoverage['assertion.js'][782] = 0;
  _$jscoverage['assertion.js'][783] = 0;
  _$jscoverage['assertion.js'][784] = 0;
  _$jscoverage['assertion.js'][786] = 0;
  _$jscoverage['assertion.js'][787] = 0;
  _$jscoverage['assertion.js'][789] = 0;
  _$jscoverage['assertion.js'][793] = 0;
  _$jscoverage['assertion.js'][796] = 0;
  _$jscoverage['assertion.js'][799] = 0;
  _$jscoverage['assertion.js'][804] = 0;
  _$jscoverage['assertion.js'][823] = 0;
  _$jscoverage['assertion.js'][824] = 0;
  _$jscoverage['assertion.js'][826] = 0;
  _$jscoverage['assertion.js'][828] = 0;
  _$jscoverage['assertion.js'][829] = 0;
  _$jscoverage['assertion.js'][831] = 0;
  _$jscoverage['assertion.js'][832] = 0;
  _$jscoverage['assertion.js'][836] = 0;
  _$jscoverage['assertion.js'][837] = 0;
  _$jscoverage['assertion.js'][838] = 0;
  _$jscoverage['assertion.js'][842] = 0;
  _$jscoverage['assertion.js'][844] = 0;
  _$jscoverage['assertion.js'][848] = 0;
  _$jscoverage['assertion.js'][850] = 0;
  _$jscoverage['assertion.js'][855] = 0;
  _$jscoverage['assertion.js'][871] = 0;
  _$jscoverage['assertion.js'][872] = 0;
  _$jscoverage['assertion.js'][876] = 0;
  _$jscoverage['assertion.js'][881] = 0;
  _$jscoverage['assertion.js'][896] = 0;
  _$jscoverage['assertion.js'][897] = 0;
  _$jscoverage['assertion.js'][902] = 0;
  _$jscoverage['assertion.js'][918] = 0;
  _$jscoverage['assertion.js'][919] = 0;
  _$jscoverage['assertion.js'][924] = 0;
  _$jscoverage['assertion.js'][931] = 0;
  _$jscoverage['assertion.js'][932] = 0;
  _$jscoverage['assertion.js'][933] = 0;
}
_$jscoverage['assertion.js'][48]++;
var AssertionError = require("./error"), eql = require("./utils/eql"), inspect = require("./utils/inspect");
_$jscoverage['assertion.js'][56]++;
module.exports = Assertion;
_$jscoverage['assertion.js'][67]++;
function Assertion(obj, msg, stack) {
  _$jscoverage['assertion.js'][68]++;
  this.ssfi = stack || arguments.callee;
  _$jscoverage['assertion.js'][69]++;
  this.obj = obj;
  _$jscoverage['assertion.js'][70]++;
  this.msg = msg;
}
_$jscoverage['assertion.js'][85]++;
Assertion.includeStack = false;
_$jscoverage['assertion.js'][99]++;
Assertion.prototype.assert = (function (expr, msg, negateMsg) {
  _$jscoverage['assertion.js'][100]++;
  var msg = (this.negate? negateMsg: msg), ok = this.negate? ! expr: expr;
  _$jscoverage['assertion.js'][103]++;
  if (! ok) {
    _$jscoverage['assertion.js'][104]++;
    throw new AssertionError({operator: this.msg, message: msg, stackStartFunction: Assertion.includeStack? this.assert: this.ssfi});
  }
});
_$jscoverage['assertion.js'][121]++;
Object.defineProperty(Assertion.prototype, "inspect", {get: (function () {
  _$jscoverage['assertion.js'][123]++;
  return inspect(this.obj);
}), configurable: true});
_$jscoverage['assertion.js'][137]++;
Object.defineProperty(Assertion.prototype, "to", {get: (function () {
  _$jscoverage['assertion.js'][139]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][153]++;
Object.defineProperty(Assertion.prototype, "be", {get: (function () {
  _$jscoverage['assertion.js'][155]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][170]++;
Object.defineProperty(Assertion.prototype, "been", {get: (function () {
  _$jscoverage['assertion.js'][172]++;
  this.tense = "past";
  _$jscoverage['assertion.js'][173]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][187]++;
Object.defineProperty(Assertion.prototype, "an", {get: (function () {
  _$jscoverage['assertion.js'][189]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][202]++;
Object.defineProperty(Assertion.prototype, "is", {get: (function () {
  _$jscoverage['assertion.js'][204]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][218]++;
Object.defineProperty(Assertion.prototype, "and", {get: (function () {
  _$jscoverage['assertion.js'][220]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][234]++;
Object.defineProperty(Assertion.prototype, "have", {get: (function () {
  _$jscoverage['assertion.js'][236]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][250]++;
Object.defineProperty(Assertion.prototype, "with", {get: (function () {
  _$jscoverage['assertion.js'][252]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][266]++;
Object.defineProperty(Assertion.prototype, "not", {get: (function () {
  _$jscoverage['assertion.js'][268]++;
  this.negate = true;
  _$jscoverage['assertion.js'][269]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][288]++;
Object.defineProperty(Assertion.prototype, "ok", {get: (function () {
  _$jscoverage['assertion.js'][290]++;
  this.assert(this.obj, "expected " + this.inspect + " to be truthy", "expected " + this.inspect + " to be falsey");
  _$jscoverage['assertion.js'][295]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][309]++;
Object.defineProperty(Assertion.prototype, "true", {get: (function () {
  _$jscoverage['assertion.js'][311]++;
  this.assert(true === this.obj, "expected " + this.inspect + " to be true", "expected " + this.inspect + " to be false");
  _$jscoverage['assertion.js'][316]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][330]++;
Object.defineProperty(Assertion.prototype, "false", {get: (function () {
  _$jscoverage['assertion.js'][332]++;
  this.assert(false === this.obj, "expected " + this.inspect + " to be false", "expected " + this.inspect + " to be true");
  _$jscoverage['assertion.js'][337]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][356]++;
Object.defineProperty(Assertion.prototype, "exist", {get: (function () {
  _$jscoverage['assertion.js'][358]++;
  this.assert(null != this.obj, "expected " + this.inspect + " to exist", "expected " + this.inspect + " to not exist");
  _$jscoverage['assertion.js'][363]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][379]++;
Object.defineProperty(Assertion.prototype, "empty", {get: (function () {
  _$jscoverage['assertion.js'][381]++;
  new Assertion(this.obj).to.have.property("length");
  _$jscoverage['assertion.js'][383]++;
  this.assert(0 === this.obj.length, "expected " + this.inspect + " to be empty", "expected " + this.inspect + " not to be empty");
  _$jscoverage['assertion.js'][388]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][406]++;
Object.defineProperty(Assertion.prototype, "arguments", {get: (function () {
  _$jscoverage['assertion.js'][408]++;
  this.assert("[object Arguments]" == Object.prototype.toString.call(this.obj), "expected " + this.inspect + " to be arguments", "expected " + this.inspect + " to not be arguments");
  _$jscoverage['assertion.js'][413]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][430]++;
Assertion.prototype.equal = (function (val) {
  _$jscoverage['assertion.js'][431]++;
  this.assert(val === this.obj, "expected " + this.inspect + " to equal " + inspect(val), "expected " + this.inspect + " to not equal " + inspect(val));
  _$jscoverage['assertion.js'][436]++;
  return this;
});
_$jscoverage['assertion.js'][451]++;
Assertion.prototype.eql = (function (obj) {
  _$jscoverage['assertion.js'][452]++;
  this.assert(eql(obj, this.obj), "expected " + this.inspect + " to equal " + inspect(obj), "expected " + this.inspect + " to not equal " + inspect(obj));
  _$jscoverage['assertion.js'][456]++;
  return this;
});
_$jscoverage['assertion.js'][471]++;
Assertion.prototype.above = (function (val) {
  _$jscoverage['assertion.js'][472]++;
  this.assert(this.obj > val, "expected " + this.inspect + " to be above " + val, "expected " + this.inspect + " to be below " + val);
  _$jscoverage['assertion.js'][477]++;
  return this;
});
_$jscoverage['assertion.js'][492]++;
Assertion.prototype.below = (function (val) {
  _$jscoverage['assertion.js'][493]++;
  this.assert(this.obj < val, "expected " + this.inspect + " to be below " + val, "expected " + this.inspect + " to be above " + val);
  _$jscoverage['assertion.js'][498]++;
  return this;
});
_$jscoverage['assertion.js'][514]++;
Assertion.prototype.within = (function (start, finish) {
  _$jscoverage['assertion.js'][515]++;
  var range = start + ".." + finish;
  _$jscoverage['assertion.js'][517]++;
  this.assert(this.obj >= start && this.obj <= finish, "expected " + this.inspect + " to be within " + range, "expected " + this.inspect + " to not be within " + range);
  _$jscoverage['assertion.js'][522]++;
  return this;
});
_$jscoverage['assertion.js'][537]++;
Assertion.prototype.a = (function (type) {
  _$jscoverage['assertion.js'][538]++;
  this.assert(type == typeof this.obj, "expected " + this.inspect + " to be a " + type, "expected " + this.inspect + " not to be a " + type);
  _$jscoverage['assertion.js'][543]++;
  return this;
});
_$jscoverage['assertion.js'][562]++;
Assertion.prototype["instanceof"] = (function (constructor) {
  _$jscoverage['assertion.js'][563]++;
  var name = constructor.name;
  _$jscoverage['assertion.js'][564]++;
  this.assert(this.obj instanceof constructor, "expected " + this.inspect + " to be an instance of " + name, "expected " + this.inspect + " to not be an instance of " + name);
  _$jscoverage['assertion.js'][569]++;
  return this;
});
_$jscoverage['assertion.js'][589]++;
Assertion.prototype.property = (function (name, val) {
  _$jscoverage['assertion.js'][590]++;
  if (this.negate && undefined !== val) {
    _$jscoverage['assertion.js'][591]++;
    if (undefined === this.obj[name]) {
      _$jscoverage['assertion.js'][592]++;
      throw new Error(this.inspect + " has no property " + inspect(name));
    }
  }
  else {
    _$jscoverage['assertion.js'][595]++;
    this.assert(undefined !== this.obj[name], "expected " + this.inspect + " to have a property " + inspect(name), "expected " + this.inspect + " to not have property " + inspect(name));
  }
  _$jscoverage['assertion.js'][601]++;
  if (undefined !== val) {
    _$jscoverage['assertion.js'][602]++;
    this.assert(val === this.obj[name], "expected " + this.inspect + " to have a property " + inspect(name) + " of " + inspect(val) + ", but got " + inspect(this.obj[name]), "expected " + this.inspect + " to not have a property " + inspect(name) + " of " + inspect(val));
  }
  _$jscoverage['assertion.js'][609]++;
  this.obj = this.obj[name];
  _$jscoverage['assertion.js'][610]++;
  return this;
});
_$jscoverage['assertion.js'][626]++;
Assertion.prototype.ownProperty = (function (name) {
  _$jscoverage['assertion.js'][627]++;
  this.assert(this.obj.hasOwnProperty(name), "expected " + this.inspect + " to have own property " + inspect(name), "expected " + this.inspect + " to not have own property " + inspect(name));
  _$jscoverage['assertion.js'][631]++;
  return this;
});
_$jscoverage['assertion.js'][648]++;
Assertion.prototype.length = (function (n) {
  _$jscoverage['assertion.js'][649]++;
  new Assertion(this.obj).to.have.property("length");
  _$jscoverage['assertion.js'][650]++;
  var len = this.obj.length;
  _$jscoverage['assertion.js'][652]++;
  this.assert(len == n, "expected " + this.inspect + " to have a length of " + n + " but got " + len, "expected " + this.inspect + " to not have a length of " + len);
  _$jscoverage['assertion.js'][657]++;
  return this;
});
_$jscoverage['assertion.js'][672]++;
Assertion.prototype.match = (function (re) {
  _$jscoverage['assertion.js'][673]++;
  this.assert(re.exec(this.obj), "expected " + this.inspect + " to match " + re, "expected " + this.inspect + " not to match " + re);
  _$jscoverage['assertion.js'][678]++;
  return this;
});
_$jscoverage['assertion.js'][693]++;
Assertion.prototype.include = (function (obj) {
  _$jscoverage['assertion.js'][694]++;
  this.assert(~ this.obj.indexOf(obj), "expected " + this.inspect + " to include " + inspect(obj), "expected " + this.inspect + " to not include " + inspect(obj));
  _$jscoverage['assertion.js'][699]++;
  return this;
});
_$jscoverage['assertion.js'][714]++;
Assertion.prototype.string = (function (str) {
  _$jscoverage['assertion.js'][715]++;
  new Assertion(this.obj).is.a("string");
  _$jscoverage['assertion.js'][717]++;
  this.assert(~ this.obj.indexOf(str), "expected " + this.inspect + " to contain " + inspect(str), "expected " + this.inspect + " to not contain " + inspect(str));
  _$jscoverage['assertion.js'][722]++;
  return this;
});
_$jscoverage['assertion.js'][736]++;
Object.defineProperty(Assertion.prototype, "contain", {get: (function () {
  _$jscoverage['assertion.js'][738]++;
  this.contains = true;
  _$jscoverage['assertion.js'][739]++;
  return this;
}), configurable: true});
_$jscoverage['assertion.js'][758]++;
Assertion.prototype.keys = (function (keys) {
  _$jscoverage['assertion.js'][759]++;
  var str, ok = true;
  _$jscoverage['assertion.js'][762]++;
  keys = keys instanceof Array? keys: Array.prototype.slice.call(arguments);
  _$jscoverage['assertion.js'][766]++;
  if (! keys.length) {
    _$jscoverage['assertion.js'][766]++;
    throw new Error("keys required");
  }
  _$jscoverage['assertion.js'][768]++;
  var actual = Object.keys(this.obj), len = keys.length;
  _$jscoverage['assertion.js'][772]++;
  ok = keys.every((function (key) {
  _$jscoverage['assertion.js'][773]++;
  return ~ actual.indexOf(key);
}));
  _$jscoverage['assertion.js'][777]++;
  if (! this.negate && ! this.contains) {
    _$jscoverage['assertion.js'][778]++;
    ok = ok && keys.length == actual.length;
  }
  _$jscoverage['assertion.js'][782]++;
  if (len > 1) {
    _$jscoverage['assertion.js'][783]++;
    keys = keys.map((function (key) {
  _$jscoverage['assertion.js'][784]++;
  return inspect(key);
}));
    _$jscoverage['assertion.js'][786]++;
    var last = keys.pop();
    _$jscoverage['assertion.js'][787]++;
    str = keys.join(", ") + ", and " + last;
  }
  else {
    _$jscoverage['assertion.js'][789]++;
    str = inspect(keys[0]);
  }
  _$jscoverage['assertion.js'][793]++;
  str = (len > 1? "keys ": "key ") + str;
  _$jscoverage['assertion.js'][796]++;
  str = (this.contains? "contain ": "have ") + str;
  _$jscoverage['assertion.js'][799]++;
  this.assert(ok, "expected " + this.inspect + " to " + str, "expected " + this.inspect + " to not " + str);
  _$jscoverage['assertion.js'][804]++;
  return this;
});
_$jscoverage['assertion.js'][823]++;
Assertion.prototype["throw"] = (function (constructor) {
  _$jscoverage['assertion.js'][824]++;
  new Assertion(this.obj).is.a("function");
  _$jscoverage['assertion.js'][826]++;
  var thrown = false;
  _$jscoverage['assertion.js'][828]++;
  try {
    _$jscoverage['assertion.js'][829]++;
    this.obj();
  }
  catch (err) {
    _$jscoverage['assertion.js'][831]++;
    if (constructor && "function" === typeof constructor && constructor.constructor != RegExp) {
      _$jscoverage['assertion.js'][832]++;
      this.assert(err instanceof constructor && err.name == constructor.name, "expected " + this.inspect + " to throw " + constructor.name + " but a " + err.name + " was thrown", "expected " + this.inspect + " to not throw " + constructor.name);
      _$jscoverage['assertion.js'][836]++;
      return this;
    }
    else {
      _$jscoverage['assertion.js'][837]++;
      if (constructor && constructor instanceof RegExp) {
        _$jscoverage['assertion.js'][838]++;
        this.assert(constructor.exec(err.message), "expected " + this.inspect + " to throw error matching " + constructor + " but got " + inspect(err.message), "expected " + this.inspect + " to throw error not matching " + constructor);
        _$jscoverage['assertion.js'][842]++;
        return this;
      }
      else {
        _$jscoverage['assertion.js'][844]++;
        thrown = true;
      }
    }
  }
  _$jscoverage['assertion.js'][848]++;
  var name = (constructor? constructor.name: "an error");
  _$jscoverage['assertion.js'][850]++;
  this.assert(thrown === true, "expected " + this.inspect + " to throw " + name, "expected " + this.inspect + " to not throw " + name);
  _$jscoverage['assertion.js'][855]++;
  return this;
});
_$jscoverage['assertion.js'][871]++;
Assertion.prototype.respondTo = (function (method) {
  _$jscoverage['assertion.js'][872]++;
  var context = ("function" === typeof this.obj)? this.obj.prototype[method]: this.obj[method];
  _$jscoverage['assertion.js'][876]++;
  this.assert("function" === typeof context, "expected " + this.inspect + " to respond to " + inspect(method), "expected " + this.inspect + " to not respond to " + inspect(method));
  _$jscoverage['assertion.js'][881]++;
  return this;
});
_$jscoverage['assertion.js'][896]++;
Assertion.prototype.satisfy = (function (matcher) {
  _$jscoverage['assertion.js'][897]++;
  this.assert(matcher(this.obj), "expected " + this.inspect + " to satisfy " + inspect(matcher), "expected " + this.inspect + " to not satisfy" + inspect(matcher));
  _$jscoverage['assertion.js'][902]++;
  return this;
});
_$jscoverage['assertion.js'][918]++;
Assertion.prototype.closeTo = (function (expected, delta) {
  _$jscoverage['assertion.js'][919]++;
  this.assert((this.obj - delta === expected) || (this.obj + delta === expected), "expected " + this.inspect + " to be close to " + expected + " +/- " + delta, "expected " + this.inspect + " not to be close to " + expected + " +/- " + delta);
  _$jscoverage['assertion.js'][924]++;
  return this;
});
_$jscoverage['assertion.js'][931]++;
(function alias(name, as) {
  _$jscoverage['assertion.js'][932]++;
  Assertion.prototype[as] = Assertion.prototype[name];
  _$jscoverage['assertion.js'][933]++;
  return alias;
})("length", "lengthOf")("keys", "key")("ownProperty", "haveOwnProperty")("above", "greaterThan")("below", "lessThan")("throw", "throws")("throw", "Throw")("instanceof", "instanceOf");
_$jscoverage['assertion.js'].source = ["/*!"," * chai"," * Copyright(c) 2011 Jake Luer &lt;jake@alogicalparadox.com&gt;"," * MIT Licensed"," *"," * Primarily a refactor of: should.js"," * https://github.com/visionmedia/should.js"," * Copyright(c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;"," * MIT Licensed"," */","","/**"," * ### BDD Style Introduction"," *"," * The BDD style is exposed through `expect` or `should` interfaces. In both"," * scenarios, you chain together natural language assertions."," *"," *      // expect"," *      var expect = require('chai').expect;"," *      expect(foo).to.equal('bar');"," *"," *      // should"," *      var should = require('chai').should();"," *      foo.should.equal('bar');"," *"," * #### Differences"," *"," * The `expect` interface provides a function as a starting point for chaining"," * your language assertions. It works on both node.js and in the browser."," *"," * The `should` interface extends `Object.prototype` to provide a single getter as"," * the starting point for your language assertions. Most browser don't like"," * extensions to `Object.prototype` so it is not recommended for browser use."," *"," * #### Configuration"," *"," * By default, Chai does not show stack traces upon an AssertionError. This can"," * be changed by modifying the `includeStack` parameter for chai.Assertion. For example:"," *"," *      var chai = require('chai');"," *      chai.Assertion.includeStack = true; // defaults to false"," */","","/*!"," * Module dependencies."," */","","var AssertionError = require('./error')","  , eql = require('./utils/eql')","  , inspect = require('./utils/inspect');","","/*!"," * Module export."," */","","module.exports = Assertion;","","","/*!"," * # Assertion Constructor"," *"," * Creates object for chaining."," *"," * @api private"," */","","function Assertion (obj, msg, stack) {","  this.ssfi = stack || arguments.callee;","  this.obj = obj;","  this.msg = msg;","}","","/*!","  * ## Assertion.includeStack","  *","  * User configurable property, influences whether stack trace","  * is included in Assertion error message. Default of false","  * suppresses stack trace in the error message","  *","  *     Assertion.includeStack = true;  // enable stack on error","  *","  * @api public","  */","","Assertion.includeStack = false;","","/*!"," * # .assert(expression, message, negateMessage)"," *"," * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass."," *"," * @name assert"," * @param {Philosophical} expression to be tested"," * @param {String} message to display if fails"," * @param {String} negatedMessage to display if negated expression fails"," * @api private"," */","","Assertion.prototype.assert = function (expr, msg, negateMsg) {","  var msg = (this.negate ? negateMsg : msg)","    , ok = this.negate ? !expr : expr;","","  if (!ok) {","    throw new AssertionError({","      operator: this.msg,","      message: msg,","      stackStartFunction: (Assertion.includeStack) ? this.assert : this.ssfi","    });","  }","};","","/*!"," * # inspect"," *"," * Returns the current object stringified."," *"," * @name inspect"," * @api private"," */","","Object.defineProperty(Assertion.prototype, 'inspect',","  { get: function () {","      return inspect(this.obj);","    },","    configurable: true","});","","/**"," * # to"," *"," * Language chain."," *"," * @name to"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'to',","  { get: function () {","      return this;","    },","    configurable: true","});","","/**"," * # be"," *"," * Language chain."," *"," * @name be"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'be',","  { get: function () {","      return this;","    },","    configurable: true","});","","/**"," * # been"," *"," * Language chain. Also tests `tense` to past for addon"," * modules that use the tense feature."," *"," * @name been"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'been',","  { get: function () {","      this.tense = 'past';","      return this;","    },","    configurable: true","});","","/**"," * # an"," *"," * Language chain."," *"," * @name an"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'an',","  { get: function () {","      return this;","    },","    configurable: true","});","/**"," * # is"," *"," * Language chain."," *"," * @name is"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'is',","  { get: function () {","      return this;","    },","    configurable: true","});","","/**"," * # and"," *"," * Language chain."," *"," * @name and"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'and',","  { get: function () {","      return this;","    },","    configurable: true","});","","/**"," * # have"," *"," * Language chain."," *"," * @name have"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'have',","  { get: function () {","      return this;","    },","    configurable: true","});","","/**"," * # with"," *"," * Language chain."," *"," * @name with"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'with',","  { get: function () {","      return this;","    },","    configurable: true","});","","/**"," * # .not"," *"," * Negates any of assertions following in the chain."," *"," * @name not"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'not',","  { get: function () {","      this.negate = true;","      return this;","    },","    configurable: true","});","","/**"," * # .ok"," *"," * Assert object truthiness."," *"," *      expect('everthing').to.be.ok;"," *      expect(false).to.not.be.ok;"," *      expect(undefined).to.not.be.ok;"," *      expect(null).to.not.be.ok;"," *"," * @name ok"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'ok',","  { get: function () {","      this.assert(","          this.obj","        , 'expected ' + this.inspect + ' to be truthy'","        , 'expected ' + this.inspect + ' to be falsey');","","      return this;","    },","    configurable: true","});","","/**"," * # .true"," *"," * Assert object is true"," *"," * @name true"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'true',","  { get: function () {","      this.assert(","          true === this.obj","        , 'expected ' + this.inspect + ' to be true'","        , 'expected ' + this.inspect + ' to be false');","","      return this;","    },","    configurable: true","});","","/**"," * # .false"," *"," * Assert object is false"," *"," * @name false"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'false',","  { get: function () {","      this.assert(","          false === this.obj","        , 'expected ' + this.inspect + ' to be false'","        , 'expected ' + this.inspect + ' to be true');","","      return this;","    },","    configurable: true","});","","/**"," * # .exist"," *"," * Assert object exists (null)."," *"," *      var foo = 'hi'"," *        , bar;"," *      expect(foo).to.exist;"," *      expect(bar).to.not.exist;"," *"," * @name exist"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'exist',","  { get: function () {","      this.assert(","          null != this.obj","        , 'expected ' + this.inspect + ' to exist'","        , 'expected ' + this.inspect + ' to not exist');","","      return this;","    },","    configurable: true","});","","/**"," * # .empty"," *"," * Assert object's length to be 0."," *"," *      expect([]).to.be.empty;"," *"," * @name empty"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'empty',","  { get: function () {","      new Assertion(this.obj).to.have.property('length');","","      this.assert(","          0 === this.obj.length","        , 'expected ' + this.inspect + ' to be empty'","        , 'expected ' + this.inspect + ' not to be empty');","","      return this;","    },","    configurable: true","});","","/**"," * # .arguments"," *"," * Assert object is an instanceof arguments."," *"," *      function test () {"," *        expect(arguments).to.be.arguments;"," *      }"," *"," * @name arguments"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'arguments',","  { get: function () {","      this.assert(","          '[object Arguments]' == Object.prototype.toString.call(this.obj)","        , 'expected ' + this.inspect + ' to be arguments'","        , 'expected ' + this.inspect + ' to not be arguments');","","      return this;","    },","    configurable: true","});","","/**"," * # .equal(value)"," *"," * Assert strict equality."," *"," *      expect('hello').to.equal('hello');"," *"," * @name equal"," * @param {*} value"," * @api public"," */","","Assertion.prototype.equal = function (val) {","  this.assert(","      val === this.obj","    , 'expected ' + this.inspect + ' to equal ' + inspect(val)","    , 'expected ' + this.inspect + ' to not equal ' + inspect(val));","","  return this;","};","","/**"," * # .eql(value)"," *"," * Assert deep equality."," *"," *      expect({ foo: 'bar' }).to.eql({ foo: 'bar' });"," *"," * @name eql"," * @param {*} value"," * @api public"," */","","Assertion.prototype.eql = function (obj) {","  this.assert(","      eql(obj, this.obj)","    , 'expected ' + this.inspect + ' to equal ' + inspect(obj)","    , 'expected ' + this.inspect + ' to not equal ' + inspect(obj));","  return this;","};","","/**"," * # .above(value)"," *"," * Assert greater than `value`."," *"," *      expect(10).to.be.above(5);"," *"," * @name above"," * @param {Number} value"," * @api public"," */","","Assertion.prototype.above = function (val) {","  this.assert(","      this.obj &gt; val","    , 'expected ' + this.inspect + ' to be above ' + val","    , 'expected ' + this.inspect + ' to be below ' + val);","","  return this;","};","","/**"," * # .below(value)"," *"," * Assert less than `value`."," *"," *      expect(5).to.be.below(10);"," *"," * @name below"," * @param {Number} value"," * @api public"," */","","Assertion.prototype.below = function (val) {","  this.assert(","      this.obj &lt; val","    , 'expected ' + this.inspect + ' to be below ' + val","    , 'expected ' + this.inspect + ' to be above ' + val);","","  return this;","};","","/**"," * # .within(start, finish)"," *"," * Assert that a number is within a range."," *"," *      expect(7).to.be.within(5,10);"," *"," * @name within"," * @param {Number} start lowerbound inclusive"," * @param {Number} finish upperbound inclusive"," * @api public"," */","","Assertion.prototype.within = function (start, finish) {","  var range = start + '..' + finish;","","  this.assert(","      this.obj &gt;= start &amp;&amp; this.obj &lt;= finish","    , 'expected ' + this.inspect + ' to be within ' + range","    , 'expected ' + this.inspect + ' to not be within ' + range);","","  return this;","};","","/**"," * # .a(type)"," *"," * Assert typeof."," *"," *      expect('test').to.be.a('string');"," *"," * @name a"," * @param {String} type"," * @api public"," */","","Assertion.prototype.a = function (type) {","  this.assert(","      type == typeof this.obj","    , 'expected ' + this.inspect + ' to be a ' + type","    , 'expected ' + this.inspect + ' not to be a ' + type);","","  return this;","};","","/**"," * # .instanceof(constructor)"," *"," * Assert instanceof."," *"," *      var Tea = function (name) { this.name = name; }"," *        , Chai = new Tea('chai');"," *"," *      expect(Chai).to.be.an.instanceOf(Tea);"," *"," * @name instanceof"," * @param {Constructor}"," * @alias instanceOf"," * @api public"," */","","Assertion.prototype.instanceof = function (constructor) {","  var name = constructor.name;","  this.assert(","      this.obj instanceof constructor","    , 'expected ' + this.inspect + ' to be an instance of ' + name","    , 'expected ' + this.inspect + ' to not be an instance of ' + name);","","  return this;","};","","/**"," * # .property(name, [value])"," *"," * Assert that property of `name` exists, optionally with `value`."," *"," *      var obj = { foo: 'bar' }"," *      expect(obj).to.have.property('foo');"," *      expect(obj).to.have.property('foo', 'bar');"," *      expect(obj).to.have.property('foo').to.be.a('string');"," *"," * @name property"," * @param {String} name"," * @param {*} value (optional)"," * @returns value of property for chaining"," * @api public"," */","","Assertion.prototype.property = function (name, val) {","  if (this.negate &amp;&amp; undefined !== val) {","    if (undefined === this.obj[name]) {","      throw new Error(this.inspect + ' has no property ' + inspect(name));","    }","  } else {","    this.assert(","        undefined !== this.obj[name]","      , 'expected ' + this.inspect + ' to have a property ' + inspect(name)","      , 'expected ' + this.inspect + ' to not have property ' + inspect(name));","  }","","  if (undefined !== val) {","    this.assert(","        val === this.obj[name]","      , 'expected ' + this.inspect + ' to have a property ' + inspect(name) + ' of ' +","          inspect(val) + ', but got ' + inspect(this.obj[name])","      , 'expected ' + this.inspect + ' to not have a property ' + inspect(name) + ' of ' +  inspect(val));","  }","","  this.obj = this.obj[name];","  return this;","};","","/**"," * # .ownProperty(name)"," *"," * Assert that has own property by `name`."," *"," *      expect('test').to.have.ownProperty('length');"," *"," * @name ownProperty"," * @alias haveOwnProperty"," * @param {String} name"," * @api public"," */","","Assertion.prototype.ownProperty = function (name) {","  this.assert(","      this.obj.hasOwnProperty(name)","    , 'expected ' + this.inspect + ' to have own property ' + inspect(name)","    , 'expected ' + this.inspect + ' to not have own property ' + inspect(name));","  return this;","};","","/**"," * # .length(val)"," *"," * Assert that object has expected length."," *"," *      expect([1,2,3]).to.have.length(3);"," *      expect('foobar').to.have.length(6);"," *"," * @name length"," * @alias lengthOf"," * @param {Number} length"," * @api public"," */","","Assertion.prototype.length = function (n) {","  new Assertion(this.obj).to.have.property('length');","  var len = this.obj.length;","","  this.assert(","      len == n","    , 'expected ' + this.inspect + ' to have a length of ' + n + ' but got ' + len","    , 'expected ' + this.inspect + ' to not have a length of ' + len);","","  return this;","};","","/**"," * # .match(regexp)"," *"," * Assert that matches regular expression."," *"," *      expect('foobar').to.match(/^foo/);"," *"," * @name match"," * @param {RegExp} RegularExpression"," * @api public"," */","","Assertion.prototype.match = function (re) {","  this.assert(","      re.exec(this.obj)","    , 'expected ' + this.inspect + ' to match ' + re","    , 'expected ' + this.inspect + ' not to match ' + re);","","  return this;","};","","/**"," * # .include(obj)"," *"," * Assert the inclusion of an object in an Array or substring in string."," *"," *      expect([1,2,3]).to.include(2);"," *"," * @name include"," * @param {Object|String|Number} obj"," * @api public"," */","","Assertion.prototype.include = function (obj) {","  this.assert(","      ~this.obj.indexOf(obj)","    , 'expected ' + this.inspect + ' to include ' + inspect(obj)","    , 'expected ' + this.inspect + ' to not include ' + inspect(obj));","","  return this;","};","","/**"," * # .string(string)"," *"," * Assert inclusion of string in string."," *"," *      expect('foobar').to.have.string('bar');"," *"," * @name string"," * @param {String} string"," * @api public"," */","","Assertion.prototype.string = function (str) {","  new Assertion(this.obj).is.a('string');","","  this.assert(","      ~this.obj.indexOf(str)","    , 'expected ' + this.inspect + ' to contain ' + inspect(str)","    , 'expected ' + this.inspect + ' to not contain ' + inspect(str));","","  return this;","};","","","","/**"," * # contain"," *"," * Toggles the `contain` flag for the `keys` assertion."," *"," * @name contain"," * @api public"," */","","Object.defineProperty(Assertion.prototype, 'contain',","  { get: function () {","      this.contains = true;","      return this;","    },","    configurable: true","});","","/**"," * # .keys(key1, [key2], [...])"," *"," * Assert exact keys or the inclusing of keys using the `contain` modifier."," *"," *      expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);"," *      expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');"," *"," * @name keys"," * @alias key"," * @param {String|Array} Keys"," * @api public"," */","","Assertion.prototype.keys = function(keys) {","  var str","    , ok = true;","","  keys = keys instanceof Array","    ? keys","    : Array.prototype.slice.call(arguments);","","  if (!keys.length) throw new Error('keys required');","","  var actual = Object.keys(this.obj)","    , len = keys.length;","","  // Inclusion","  ok = keys.every(function(key){","    return ~actual.indexOf(key);","  });","","  // Strict","  if (!this.negate &amp;&amp; !this.contains) {","    ok = ok &amp;&amp; keys.length == actual.length;","  }","","  // Key string","  if (len &gt; 1) {","    keys = keys.map(function(key){","      return inspect(key);","    });","    var last = keys.pop();","    str = keys.join(', ') + ', and ' + last;","  } else {","    str = inspect(keys[0]);","  }","","  // Form","  str = (len &gt; 1 ? 'keys ' : 'key ') + str;","","  // Have / include","  str = (this.contains ? 'contain ' : 'have ') + str;","","  // Assertion","  this.assert(","      ok","    , 'expected ' + this.inspect + ' to ' + str","    , 'expected ' + this.inspect + ' to not ' + str);","","  return this;","}","","/**"," * # .throw(constructor)"," *"," * Assert that a function will throw a specific type of error."," *"," *      var fn = function () { throw new ReferenceError(''); }"," *      expect(fn).to.throw(ReferenceError);"," *"," * @name throw"," * @alias throws"," * @alias Throw"," * @param {ErrorConstructor} constructor"," * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types"," * @api public"," */","","Assertion.prototype.throw = function (constructor) {","  new Assertion(this.obj).is.a('function');","","  var thrown = false;","","  try {","    this.obj();","  } catch (err) {","    if (constructor &amp;&amp; 'function' === typeof constructor &amp;&amp; constructor.constructor != RegExp) {","      this.assert(","          err instanceof constructor &amp;&amp; err.name == constructor.name","        , 'expected ' + this.inspect + ' to throw ' + constructor.name + ' but a ' + err.name + ' was thrown'","        , 'expected ' + this.inspect + ' to not throw ' + constructor.name );","      return this;","    } else if (constructor &amp;&amp; constructor instanceof RegExp) {","      this.assert(","          constructor.exec(err.message)","        , 'expected ' + this.inspect + ' to throw error matching ' + constructor + ' but got ' + inspect(err.message)","        , 'expected ' + this.inspect + ' to throw error not matching ' + constructor);","      return this;","    } else {","      thrown = true;","    }","  }","","  var name = (constructor ? constructor.name : 'an error');","","  this.assert(","      thrown === true","    , 'expected ' + this.inspect + ' to throw ' + name","    , 'expected ' + this.inspect + ' to not throw ' + name);","","  return this;","};","","/**"," * # .respondTo(method)"," *"," * Assert that object/class will respond to a method."," *"," *      expect(Klass).to.respondTo('bar');"," *      expect(obj).to.respondTo('bar');"," *"," * @name respondTo"," * @param {String} method"," * @api public"," */","","Assertion.prototype.respondTo = function (method) {","  var context = ('function' === typeof this.obj)","    ? this.obj.prototype[method]","    : this.obj[method];","","  this.assert(","      'function' === typeof context","    , 'expected ' + this.inspect + ' to respond to ' + inspect(method)","    , 'expected ' + this.inspect + ' to not respond to ' + inspect(method));","","  return this;","};","","/**"," * # .satisfy(method)"," *"," * Assert that passes a truth test."," *"," *      expect(1).to.satisfy(function(num) { return num &gt; 0; });"," *"," * @name satisfy"," * @param {Function} matcher"," * @api public"," */","","Assertion.prototype.satisfy = function (matcher) {","  this.assert(","      matcher(this.obj)","    , 'expected ' + this.inspect + ' to satisfy ' + inspect(matcher)","    , 'expected ' + this.inspect + ' to not satisfy' + inspect(matcher));","","  return this;","};","","/**"," * # .closeTo(expected, delta)"," *"," * Assert that actual is equal to +/- delta."," *"," *      expect(1.5).to.be.closeTo(1, 0.5);"," *"," * @name closeTo"," * @param {Number} expected"," * @param {Number} delta"," * @api public"," */","","Assertion.prototype.closeTo = function (expected, delta) {","  this.assert(","      (this.obj - delta === expected) || (this.obj + delta === expected)","    , 'expected ' + this.inspect + ' to be close to ' + expected + ' +/- ' + delta","    , 'expected ' + this.inspect + ' not to be close to ' + expected + ' +/- ' + delta);","","  return this;","};","","/*!"," * Aliases."," */","","(function alias(name, as){","  Assertion.prototype[as] = Assertion.prototype[name];","  return alias;","})","('length', 'lengthOf')","('keys', 'key')","('ownProperty', 'haveOwnProperty')","('above', 'greaterThan')","('below', 'lessThan')","('throw', 'throws')","('throw', 'Throw') // for troublesome browsers","('instanceof', 'instanceOf');"];
